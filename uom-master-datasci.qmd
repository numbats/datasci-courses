---
title: "Master of Data Science - UoM"
author: "Rachel Xinrui WANG"
date: "`r Sys.Date()`"
format: 
  html:
    code-fold: false
---

```{r setup, include = FALSE}
library(tidyverse)
library(rvest)
library(RSelenium)
library(glue)
knitr::opts_chunk$set(echo = FALSE,
                      cache = TRUE,
                      cache.path = "cache/",
                      fig.path = "images/")

```


```{r}
# remDr$close()
# system("taskkill /im java.exe /f", intern=FALSE, ignore.stdout=FALSE)
rD <- rsDriver(browser="firefox", port=4778L, verbose=F)
remDr <- rD[["client"]]

baseurl <- "https://handbook.unimelb.edu.au"
year <- 2022
wait_time <- function() Sys.sleep(sample(3:5, 1))

data <- tibble(Course = character(),
               #Course_code = character(),
               Course_overview = character(),
               Unit = character(),
               #Unit_code = character(),
               Overview = character(),
               Prerequisite = character(),
               Corequisite = character(),
               Prohibition = character(),
               Outcomes = character())

remDr$navigate("https://handbook.unimelb.edu.au/2022/courses/mc-datasc")
course_html <- read_html(remDr$getPageSource()[[1]])

```

```{r}
tryCatch({
  
    # course name
    title <- course_html %>% 
      html_element("h1") %>% 
      html_text()
    
    # course overview
    coverview <- course_html %>% 
      html_element("#top") %>% 
      html_element(".course__body") %>% 
      html_element(".course__overview-wrapper") %>% 
      html_elements("p") %>% 
      html_text()
  
    remDr$navigate("https://handbook.unimelb.edu.au/2022/courses/mc-datasc/course-structure")
    sub_list <- read_html(remDr$getPageSource()[[1]])
    
    # extract all listed units
    curriculum <- sub_list %>% 
      html_element("#top") %>% 
      html_element(".mobile-wrap") %>% 
      html_elements("table") %>% 
      html_elements("a") %>% 
      html_attr("href")
  
    for(unit in curriculum) {
      remDr$navigate(glue("{baseurl}{unit}"))
      wait_time()
      unit_html <- read_html(remDr$getPageSource()[[1]])
      
      # unit name
      subject_text <- unit_html %>% 
        html_element("h1") %>% 
        html_text()
      
      # unit code
      # cunit <- unit_html %>% 
      #   html_element("h5") %>% 
      #   html_text()
      
      # unit overview
      overviews <- unit_html %>%
        html_element("#top") %>% 
        html_element(".course__overview-wrapper") %>% 
        html_elements("p") %>% 
        html_text()
      
      if(str_trim(overviews[1], "right") %in% c("AIMS","AIM")){
        overview <- overviews[2]
      } else{
        overview <- overviews[1]
      }
      
      
      # unit learning outcome
      lo <- unit_html %>% 
        html_element("#learning-outcomes") %>% 
        html_element(".ticked-list") %>% 
        html_text()
    
      # navigate to unit eligibility and requirements page
      requirements <- unit_html %>% 
        html_element("#top") %>% 
        html_element(".course__sidebar-navigation") %>% 
        html_elements("a") %>% 
        html_attr("href")
        
      remDr$navigate(glue("{baseurl}{requirements[2]}"))
      wait_time()
      req_html <- read_html(remDr$getPageSource()[[1]])
      
      # pre-requisites
      pre <- req_html %>% 
         html_element("#prerequisites") %>% 
         html_elements("td") %>% 
         html_elements("a") %>% 
         html_text()
      
      # extract links of the prerequisites and save them in a list?
      # prelinks <- req_html %>% 
      #   html_element("#prerequisites") %>% 
      #   html_elements("td") %>% 
      #   html_elements("a") %>% 
      #   html_attr("href")
      # 
      # for(subject in prelinks) {
      # remDr$navigate(glue("{baseurl}{subject}"))
      # wait_time()
      # subject_html <- read_html(remDr$getPageSource()[[1]])
      # 
      # pre <- subject_html %>% 
      #   html_element("h1") %>% 
      #   html_text()
      # }
      
      # corequisites
      co <- "None"
        
      
      # prohibitions - select all then filter out units that are prerequisites
      
      if(length(pre) > 0){
        pre_df <- pre %>% 
        as.data.frame() %>% 
        rename(unit = ".")
      } else{
        pre <- "None"
        pre_df <- tibble(unit = character())
      }
      
      pro_df <- req_html %>% 
        html_element(".page-inner") %>% 
        html_element(".mobile-wrap") %>% 
        html_elements(".zebra") %>% 
        #html_element("td") %>% 
        html_elements("a") %>% 
        html_text() %>% 
        as.data.frame() %>% 
        rename(unit = ".") %>% 
        filter(!unit %in% pre_df$unit)
      
      if(dim(pro_df)[1] > 0){
        pro <- as.vector(pro_df$unit)
      } else{
        pro <- "None"
      }
      
      
      
      data <- data %>% 
        bind_rows(tibble(!!!c(list(Course = title, 
                                   #Course_code = "MC-DATASC", 
                                   Course_overview = paste0(coverview, collapse = " "),
                                   #Unit_code = cunit,
                                   Unit = subject_text,
                                   Overview = overview,
                                   Prerequisite = paste0(pre, collapse = ", "),
                                   Corequisite = co,
                                   Prohibition = paste0(pro, collapse = ", "),
                                   Outcomes =lo
                                   )))) %>% 
        mutate(Unit_type = 
                 case_when(row_number()<= 6 ~ "Units by Background",
                           row_number() > 6 & row_number() < 17 ~ "Core",
                           row_number() > 16 ~ "Elective"))
    }

    }
    , error = function(x) x
    )

```

```{r}
data_cleaned <- data %>% 
  mutate(Unit_code = str_extract(data$Unit, "\\(.+\\)"),
         Course_code = str_extract(data$Course, "\\(.+\\)"))
  

data_cleaned$Unit_code <- gsub("[()]", "", data_cleaned$Unit_code)

data_cleaned$Course_code <- gsub("[()]", "", data_cleaned$Course_code)

data_cleaned$Course <- gsub("\\s*\\([^\\)]+\\)", "", data_cleaned$Course)

data_cleaned$Unit <- gsub("\\s*\\([^\\)]+\\)", "", data_cleaned$Unit)
```

```{r}
write.csv(data_cleaned, file = "data/uom-master-datasci.csv")
```

